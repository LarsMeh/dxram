Styleguide

In DXRAM we use the Checkstyle project for the styleguide integration.

The most common styleguide rules are presented below:

1. Annotations
1.1. All package annotations need to be in the package-info.java file
1.2. @Override need to be present on overridden methods
1.3. @Deprecated need to be present on deprecated methods

2. Javadoc Comments
2.1. Every Method must have a Javadoc comment
2.1. Every Zype (Class/Interface/Enum) must have a Javadoc comment
2.1. Every Package must have a Javadoc comment (package-info.java file)

3. Naming Conventions
3.1. Constant Names - ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$
3.2. Local Final Variable Names - ^[a-z][a-zA-Z0-9]*$
3.3. Local Variable Names - ^[a-z][a-zA-Z0-9]*$
3.4. Member Names - ^m_[a-z][a-zA-Z0-9]*$
3.5. Method Names - ^[a-z][a-zA-Z0-9]*$
3.6. Package Names - ^[a-z]+(\.[a-z]*)*$
3.7. Parameter Names - ^p_[a-z][a-zA-Z0-9]*$
3.8. Static Variable Names - ^m_[a-z][a-zA-Z0-9]*$
3.9. Type Names - ^[A-Z][a-zA-Z0-9]*$
3.10. Abstract Class Names - ^Abstract[A-Z][a-zA-Z0-9]*$
3.11. Class Type Parameter Names - ^[A-Z][a-zA-Z0-9]*$
3.12. Method Type Parameter Names - ^[A-Z][a-zA-Z0-9]*$

4. Imports
4.1. No * imports
4.2. No redundant imports
4.3. No unused imports
4.4. No static imports
4.5. Import order: java, javax, sun, de.uniduesseldorf.dxram, org, com

5. Size Violations
5.1. Maximum line width: 120
5.2. Only one outer class is allowed per file

6. Whitespace
6.1. No whitespace in an empty for
6.2. No whitespace between a method identifier and the left paranthesis of the parameter list
6.3. No whitespace around generic type parameters
6.4. No trailing whitespaces

7. Modifiers
7.1. No redundant modifiers
7.2. modifier order: public, protected, private, abstract, static, final, transient, volatile, synchronized, native, strictfp

8. Blocks
8.1. No nested blocks
8.2. do, while, for, if and else need braces
8.3. Left curly braces need to be placed on the end of line
8.4. Right curly braces need to be placed on a new line

9. Coding Problems
9.1. No online conditionals
9.2. No empty statements
9.3. A class that overides the equals() method must also overide the hashCode() method
9.4. No inner assignments
9.5. A switch statement must have a default clause (after the case statements)
9.6. No redundant throws
9.7. Boolean expressions need to be simple
9.8. Boolean returns need to be simple
9.9. A class that implements a covariant equals() methods must also implement a equals(java.lang.Object) method
9.10. Declaration order: class (static) variables, instance variables, constructors, methods
9.11. No fall through in switch statements
9.12. General types should not be declared to be thrown: java.lang.Throwable, java.lang.Error, java.lang.RuntimeException, java.lang.Exception
9.13. Every class need to declare a constructor
9.14. Every variable declaration need to be on a new line
9.16. No parameter assignments
9.17. Only one return is allowed in a method
9.18. Only one statement per line is allowed
9.19. Classes must have a package declaration (the default package is not allowed)

10. Class Design
10.1. Classes need to be designed for extension (nonprivate, nonstatic methods need to be abstract, final or empty)
10.2. A class with only private constructors need to be final
10.3. A class with only static methods must have only a private constructor
10.4. Only static final members can be public or protected
10.5. Nested types need to be at the end of the outer type
10.6. Exceptions need to be immutable
10.7. An interface must declare at least one method

11. Miscellaneous
11.1. Array type declaration need to be at the type (e.g. String[] args; not String args[])
11.2. parameters need to be final (constructor, method, catch-block)
11.3. Long constants need to be defined with an upper L
11.4. Indentaion: 4
11.5. Variables need to be declared at the beginning of a method
11.6. Code and comments are not allowed in the same line
11.7. The outer type name need to match the file name
11.8. A new line need to be at the end of the file
