#!/bin/bash

######################################################
# Compile the java vm options string for a terminal
# Globals:
#   VM_OPTS - Created by function ("return value")
# Arguments:
#   ip - The IP of the terminal
#   port - The port of terminal
#   script - Terminal script to run after start (optional)
######################################################
compile_vm_options_string_terminal() {
	local ip=$1
	local port=$2
	local script=$3

	VM_OPTS=""
	VM_OPTS="$VM_OPTS -Dlog4j.configurationFile=config/log4j.xml"
	VM_OPTS="$VM_OPTS -Ddxram.config=config/dxram.json"
	VM_OPTS="$VM_OPTS -Ddxram.m_engineSettings.m_address.m_ip=$ip"
	VM_OPTS="$VM_OPTS -Ddxram.m_engineSettings.m_address.m_port=$port"
	VM_OPTS="$VM_OPTS -Ddxram.m_engineSettings.m_role=Terminal"

	if [ "$script" ]; then
		VM_OPTS="$VM_OPTS -Ddxram.m_services[TerminalService].m_autostartScript=script/dxram/$script"
	fi
}

######################################################
# Start a Terminal on a remote node
# Globals:
#   DXRAM_PATH
#   DEFAULT_CLASS
# Arguments:
#   ip - The IP of the Peer
#   port - The port of Peer
#   hostname - The hostname
#   script - The script with terminal commands
#   additional_shell_cmds - Shell commands to execute before execution dxram
######################################################
start_remote_terminal()
{
	local ip=$1
	local port=$2
	local hostname=$3
	local script=$4
	local additional_shell_cmds="$5"

	compile_vm_options_string_terminal "$ip" "$port" "$script"

	echo "Executing terminal on $3 ($ip, $port):"
	if [ "$additional_shell_cmds" != "" ]; then
		ssh $hostname -t "bash -l -c \"$additional_shell_cmds && cd $DXRAM_PATH && java $VM_OPTS -cp $LIBRARIES $DEFAULT_CLASS\""
	else
		ssh $hostname -t "bash -l -c \"cd $DXRAM_PATH && java $VM_OPTS -cp $LIBRARIES $DEFAULT_CLASS\""
	fi
}

######################################################
# Start a Terminal locally
# Globals:
#   DXRAM_PATH
#   DEFAULT_CLASS
#   EXECUTION_DIR
# Arguments:
#   ip - The IP of the Peer
#   port - The port of Peer
#   script - The script with terminal commands
#   additional_shell_cmds - Shell commands to execute before execution dxram
######################################################
start_local_terminal()
{
	local ip=$1
	local port=$2
	local script=$3
	local additional_shell_cmds="$4"

	compile_vm_options_string_terminal "$ip" "$port" "$script"

	if [ "$additional_shell_cmds" != "" ]; then
		eval $additional_shell_cmds
	fi
 
	cd "$DXRAM_PATH"
	java $VM_OPTS -cp $LIBRARIES $DEFAULT_CLASS
	cd "$EXECUTION_DIR"
}

###############
# Entry point #
###############

EXECUTION_DIR=$1
LOG_DIR=$2
DXRAM_PATH=$3
DEFAULT_CLASS=$4
LIBRARIES=$5
DEFAULT_CONDITION=$6

ip=$7
port=$8
hostname=$9
role=${10}
is_remote=${11}
node_conf_entry=${12}
zookeeper_ip=${13}
zookeeper_port=${14}
additional_shell_cmds=${15}

iter=5
while true; do
	tmp=`echo $node_conf_entry | cut -d ',' -f $iter`
		iter=$((iter + 1))

		arg_type=`echo $tmp | cut -d '=' -f 1`
		if [ "$arg_type" = "" ] ; then
			break
		elif [ "$arg_type" = "script" ] ; then
				script=`echo $tmp | cut -d '=' -f 2`
		elif [ "$arg_type" = "shellcmd" ] ; then
				additional_shell_cmds=`echo $tmp | cut -d '=' -f 2`
		else
			echo "ERROR: Unknown parameter type $arg_type"
		fi
done

echo "Starting terminal ($ip $port $script)"
echo "Quit with ctrl+c or by typing \"quit\""
echo "Output:"

if [ "$is_remote" = false ]; then
	start_local_terminal "$ip" "$port" "$script" "$additional_shell_cmds"
else
	start_remote_terminal "$ip" "$port" "$hostname" "$script" "$additional_shell_cmds"
fi
exit 0
