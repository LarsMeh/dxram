#!/bin/bash

######################################################
# Compile the parameter string for dxram
# Globals:
#   YCSB_PARAMS - Created by function ("return value")
# Arguments:
#   ip - The IP of the Peer
#   port - The port of Peer
#   ram_size_in_mb - The key-value store size (optional)
#   total_storage_nodes - Total number of DXRAM storage nodes
#   total_run_nodes - Total number of YCSB run/benchmark nodes
#   zookeeper_string - String for zookeeper connection (format: <ip>:<port>)
#   insertstart - Start record offset for node
#   recordcount - Total number of records for node
######################################################
compile_ycsb_application_options_string_peer()
{
	local ip=$1
	local port=$2
	local ram_size_in_mb=$3
	local total_storage_nodes=$4
	local total_run_nodes=$5
	local zookeeper_string=$6
	local insertstart=$7
	local recordcount=$8

	YCSB_PARAMS=""

	YCSB_PARAMS="$YCSB_PARAMS -p dxramdeployscript=1"
	YCSB_PARAMS="$YCSB_PARAMS -p log4j.configurationFile=config/log4j.xml"
	YCSB_PARAMS="$YCSB_PARAMS -p dxram.config=config/dxram.json"
	YCSB_PARAMS="$YCSB_PARAMS -p dxram.m_config.m_engineConfig.m_address.m_ip=$ip"
	YCSB_PARAMS="$YCSB_PARAMS -p dxram.m_config.m_engineConfig.m_address.m_port=$port"
	YCSB_PARAMS="$YCSB_PARAMS -p dxram.m_config.m_engineConfig.m_role=Peer"

	YCSB_PARAMS="$YCSB_PARAMS -p zookeeper.string=$zookeeper_string"
	YCSB_PARAMS="$YCSB_PARAMS -p recordcount=$recordcount"
	YCSB_PARAMS="$YCSB_PARAMS -p status.interval=1"

	# parameters only used on storage instance
	if [ "$ram_size_in_mb" != "-" ]; then
		YCSB_PARAMS="$YCSB_PARAMS -p dxram.m_config.m_componentConfigs[MemoryManagerComponentConfig].m_keyValueStoreSize.m_value=$ram_size_in_mb"
		YCSB_PARAMS="$YCSB_PARAMS -p dxram.m_config.m_componentConfigs[MemoryManagerComponentConfig].m_keyValueStoreSize.m_unit=mb"
	fi

	if [ "$total_storage_nodes" != "-" ]; then
		YCSB_PARAMS="$YCSB_PARAMS -p dxram.nodes_store=$total_storage_nodes"
	fi

	if [ "$total_run_nodes" != "-" ]; then
		YCSB_PARAMS="$YCSB_PARAMS -p dxram.nodes_run=$total_run_nodes"
	fi

	if [ "$insertstart" != "-" ]; then
		YCSB_PARAMS="$YCSB_PARAMS -p insertstart=$insertstart"
	fi
}

######################################################
# Start a Peer on a remote node
# Globals:
#   DXRAM_PATH
# Arguments:
#   ip - The IP of the Peer
#   port - The port of Peer
#   hostname - The hostname
#   ram_size_in_mb - The key-value store size
#   run_as_root - Run the instance as root
#   total_storage_nodes - Total number of DXRAM storage nodes
#   total_run_nodes - Total number of YCSB run/benchmark nodes
#   zookeeper_string - String for zookeeper connection (format: <ip>:<port>)
#   insertstart - Start record offset for node
#   recordcount - Total number of records for node
#   ycsb_type - Type of YCSB instance (load or run)
#   ycsb_threads - Number of threads for YCSB instance
#   ycsb_workload - Workload to execute
######################################################
start_remote_peer()
{
	local ip=$1
	local port=$2
	local ram_size_in_mb=$3
	local total_storage_nodes=$4
	local total_run_nodes=$5
	local run_as_root=$6
	local zookeeper_string=$7
	local insertstart=$8
	local recordcount=$9
	local ycsb_type=${10}
	local ycsb_threads=${11}
	local ycsb_workload=${12}
	local additional_shell_cmds="${13}"

	compile_ycsb_application_options_string_peer "$ip" "$port" "$ram_size_in_mb" "$total_storage_nodes" "$total_run_nodes" "$zookeeper_string" "$insertstart" "$recordcount"

	if [ "$run_as_root" != "" ] || [ "$run_as_root" == "1" ]; then
		root="sudo -P"
	fi

	# Check if an instance is already running
	if [ "$(ssh ${hostname} "pgrep -f \"^java \-Ddxramdeployscript\"")" != "" ]; then
		echo "WARNING: Detected active instance on ${hostname}"
	fi

	echo "Executing peer on $3 ($ip, $port):"

	if [ "$additional_shell_cmds" != "" ]; then
		ssh $hostname -n "$additional_shell_cmds && cd ${DXRAM_PATH} && $root ./bin/ycsb $ycsb_type dxram -threads $ycsb_threads -s -P workloads/$ycsb_workload $YCSB_PARAMS"
	else
		# we assume the ycsb and dxram folder are merged
		ssh $hostname -n "cd ${DXRAM_PATH} && $root ./bin/ycsb $ycsb_type dxram -threads $ycsb_threads -s -P workloads/$ycsb_workload $YCSB_PARAMS"
	fi
}

######################################################
# Start a Peer locally
# Globals:
#   DXRAM_PATH
# Arguments:
#   ip - The IP of the Peer
#   port - The port of Peer
#   ram_size_in_mb - The key-value store size
#   run_as_root - Run the instance as root
#   total_storage_nodes - Total number of DXRAM storage nodes
#   total_run_nodes - Total number of YCSB run/benchmark nodes
#   zookeeper_string - String for zookeeper connection (format: <ip>:<port>)
#   insertstart - Start record offset for node
#   recordcount - Total number of records for node
#   ycsb_type - Type of YCSB instance (load or run)
#   ycsb_threads - Number of threads for YCSB instance
#   ycsb_workload - Workload to execute
######################################################
start_local_peer()
{
	local ip=$1
	local port=$2
	local ram_size_in_mb=$3
	local run_as_root=$4
	local total_storage_nodes=$5
	local total_run_nodes=$6
	local zookeeper_string=$7
	local insertstart=$8
	local recordcount=$9
	local ycsb_type=${10}
	local ycsb_threads=${11}
	local ycsb_workload=${12}
	local additional_shell_cmds="${13}"

	compile_ycsb_application_options_string_peer "$ip" "$port" "$ram_size_in_mb" "$total_storage_nodes" "$total_run_nodes" "$zookeeper_string" "$insertstart" "$recordcount"

	if [ "$run_as_root" != "" ] || [ "$run_as_root" == "1" ]; then
		root="sudo -P"
	fi

	if [ "$additional_shell_cmds" != "" ]; then
		eval $additional_shell_cmds
	fi

	# we assume the ycsb and dxram folder are merged
	cd "${DXRAM_PATH}"
	$root ./bin/ycsb $ycsb_type dxram -threads $ycsb_threads -s -P workloads/$ycsb_workload $YCSB_PARAMS
	cd "$EXECUTION_DIR"
}

######################################################
# Check Peer startup, exit on failure
# Globals:
#   LOG_DIR
# Arguments:
#   port - The port of Peer
#   hostname - The hostname
#   condition - The string to wait for
######################################################
check_peer_startup()
{
	local port=$1
	local hostname=$2
	local condition="$3"

	if [ "$condition" == "none" ]; then
        echo " SKIPPING CHECK"
        return
    fi

	local logfile="${LOG_DIR}/${hostname}_${port}_peer"

	while true; do
		echo -n "."

		local success=`cat "$logfile" 2> /dev/null | grep "$condition"`
		local fail_init=`cat "$logfile" 2> /dev/null | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | grep "^Initializing DXRAM failed.$"`
		# Abort execution after an exception was thrown (every exception but NetworkResponseCancelledException)
		local fail_error=`cat "$logfile" 2> /dev/null | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | grep -i "exception" | grep -v "NetworkResponseCancelledException"`
		if [ "$success" != "" ] ; then
			pid=$(ssh ${hostname} "pgrep -f \"^java \-Ddxramdeployscript\"")
			echo " SUCCESS (pid: $pid)"
			break
		elif [ "$fail_init" != "" ] ; then
			echo " ERROR: YCSB Peer could not be started. See log file $logfile"
			exit -1
		elif [ "$fail_error" != "" ] ; then
			echo " ERROR: YCSB Peer failed. See log file $logfile"
			exit -1
		fi
		sleep 1.0
	done
}



###############
# Entry point #
###############

EXECUTION_DIR=$1
LOG_DIR=$2
DXRAM_PATH=$3
DEFAULT_CLASS=$4
LIBRARIES=$5
DEFAULT_CONDITION=$6

ip=$7
port=$8
hostname=$9
role=${10}
is_remote=${11}
node_conf_entry=${12}
zookeeper_ip=${13}
zookeeper_port=${14}
additional_shell_cmds=${15}

# default values: unused indicator
ram_size_in_mb="-"
ycsb_nodes_store="-"
ycsb_nodes_run="-"
ycsb_insertstart="-"

iter=5
while true; do
	tmp=`echo $node_conf_entry | cut -d ',' -f $iter`
	iter=$((iter + 1))

	arg_type=`echo $tmp | cut -d '=' -f 1`
	if [ "$arg_type" = "" ] ; then
		break
	elif [ "$arg_type" = "kvss" ] ; then
		ram_size_in_mb=`echo $tmp | cut -d '=' -f 2`
	elif [ "$arg_type" = "cond" ] ; then
		condition=`echo $tmp | cut -d '=' -f 2`
		condition="$condition"
	elif [ "$arg_type" = "type" ] ; then
		ycsb_type=`echo $tmp | cut -d '=' -f 2`
	elif [ "$arg_type" = "threads" ] ; then
		ycsb_threads=`echo $tmp | cut -d '=' -f 2`
	elif [ "$arg_type" = "workload" ] ; then
		ycsb_workload=`echo $tmp | cut -d '=' -f 2`
	elif [ "$arg_type" = "nodes_store" ] ; then
		ycsb_nodes_store=`echo $tmp | cut -d '=' -f 2`
	elif [ "$arg_type" = "nodes_run" ] ; then
		ycsb_nodes_run=`echo $tmp | cut -d '=' -f 2`
	elif [ "$arg_type" = "insertstart" ] ; then
		ycsb_insertstart=`echo $tmp | cut -d '=' -f 2`
	elif [ "$arg_type" = "recordcount" ] ; then
		ycsb_recordcount=`echo $tmp | cut -d '=' -f 2`
	elif [ "$arg_type" = "shellcmd" ]; then
		additional_shell_cmds=`echo $tmp | cut -d '=' -f 2`
	elif [ "$arg_type" = "root" ]; then
		run_as_root=`echo $tmp | cut -d '=' -f 2`	
	else
		echo "ERROR: Unknown parameter type $arg_type"
	fi
done

if [ "$condition" = "" ]; then
	condition=$DEFAULT_CONDITION
fi

# Check if an instance is already running
if [ "$is_remote" = false ]; then
	if [ "$(ssh ${hostname} "pgrep -f "^java.*$(echo $ip | sed -r 's/\./\\\./g').*${port}"")" != "" ]; then
		echo "ERROR: Detected active instance ${ip}:${port} on ${hostname}"
		exit 1	
	fi
else
	if [ "$(pgrep -f "^java.*$(echo $ip | sed -r 's/\./\\\./g').*${port}")" != "" ]; then
		echo "ERROR: Detected active instance ${ip}:${port} on ${hostname}"
		exit 1
	fi
fi

print=`echo "YCSB Peer $ip:$port (kvsm{$ram_size_in_mb} nodes_store{$ycsb_nodes_store} nodes_run{$ycsb_nodes_run} zk{${zookeeper_ip}:${zookeeper_port}} insertstart{$ycsb_insertstart} recordcnt{$ycsb_recordcount} type{$ycsb_type} threads{$ycsb_threads} workload{$ycsb_workload} add_shell_cmds{$additional_shell_cmds}): Starting ." | tr -s ' ' | sed -e 's/ )/)/g'`
echo -n "$print"

if [ "$is_remote" = false ]; then
	echo -n "."
	start_local_peer "$ip" "$port" "$ram_size_in_mb" "$run_as_root" "$ycsb_nodes_store" "$ycsb_nodes_run" "${zookeeper_ip}:${zookeeper_port}" "$ycsb_insertstart" "$ycsb_recordcount" "$ycsb_type" "$ycsb_threads" "$ycsb_workload" "$additional_shell_cmds" > "${LOG_DIR}/${hostname}_${port}_peer" 2>&1 &
	echo -n "."
else
	echo -n "."
	start_remote_peer "$ip" "$port" "$ram_size_in_mb" "$run_as_root" "$ycsb_nodes_store" "$ycsb_nodes_run" "${zookeeper_ip}:${zookeeper_port}" "$ycsb_insertstart" "$ycsb_recordcount" "$ycsb_type" "$ycsb_threads" "$ycsb_workload" "$additional_shell_cmds" > "${LOG_DIR}/${hostname}_${port}_peer" 2>&1 &
	echo -n "."
fi

check_peer_startup "$port" "$hostname" "$condition"
exit 0
